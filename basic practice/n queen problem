#include<iostream>
#include <iomanip>
#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn = 11;
int n = 0;
int ans = 0;
int P[maxn], hashTable[maxn] = { 0 };
void generateP(int index) {
	if (index == n + 1) {
		ans++;
		return;
	}
	for (int x = 1; x <= n; x++) {
		
		if (hashTable[x] == false) {
			bool flag = true;
			//对之前的皇后遍历
			//index列皇后行号为x,pre列皇后行号为P[pre]
			for (int pre = 1; pre < index; pre++) {
				if (abs(index - pre) == abs(x - P[pre])) {
					flag = false; //对角线冲突
					break;
				}
			}
			if (flag) {
				P[index] = x;
				hashTable[x] = true;
				generateP(index + 1);
				hashTable[x] = false; //递归完后还原第x行没被占用
			}
		}
	}
};
int main(){
	cin >> n;
	generateP(1);
	cout << ans;

	system("pause");
	return 0;
}
